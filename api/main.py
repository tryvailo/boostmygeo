"""
–û—Å–Ω–æ–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è AI Visibility MVP - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è Vercel
"""

import os
import tempfile
import threading
import hashlib
from typing import Optional
import pandas as pd
from io import BytesIO

from fastapi import FastAPI, Request, UploadFile, File, Form, HTTPException
from fastapi.responses import JSONResponse, StreamingResponse, HTMLResponse
from starlette.middleware.cors import CORSMiddleware

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import EMAIL_REGEX, MAX_UPLOAD_MB, ALLOW_RETRY_SAME_FILE, validate_config
from database import db
from file_processor import FileProcessor
from openai_client import openai_client
from metrics import MetricsCalculator
from email_service import email_service

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="AI Visibility MVP",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ ChatGPT",
    version="1.0.0"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"]
)

# HTML –ª–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ –∫–æ–¥
LANDING_HTML = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Visibility Analytics - Analyze Your Brand's AI Search Presence</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .card {
            background: white;
            border-radius: 15px;
            padding: 3rem;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 1rem;
            font-size: 2.5rem;
            font-weight: 700;
        }
        
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            font-size: 1.2rem;
            margin-bottom: 2rem;
        }
        
        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .feature {
            text-align: center;
            padding: 1.5rem;
            background: #f8f9fa;
            border-radius: 10px;
        }
        
        .feature-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }
        
        .feature h3 {
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }
        
        .upload-section {
            background: #f8f9fa;
            padding: 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #2c3e50;
            font-weight: 600;
        }
        
        input[type="email"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }
        
        input[type="email"]:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .file-upload {
            position: relative;
            display: inline-block;
            width: 100%;
        }
        
        input[type="file"] {
            width: 100%;
            padding: 12px;
            border: 2px dashed #ddd;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: border-color 0.3s;
        }
        
        input[type="file"]:hover {
            border-color: #667eea;
        }
        
        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
            margin-left: 1rem;
        }
        
        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }
        
        .template-section {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .format-info {
            background: #e3f2fd;
            padding: 1.5rem;
            border-radius: 10px;
            margin-top: 2rem;
        }
        
        .format-info h4 {
            color: #1976d2;
            margin-bottom: 1rem;
        }
        
        .format-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }
        
        .format-table th,
        .format-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .format-table th {
            background: #f5f5f5;
            font-weight: 600;
        }
        
        .status {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 8px;
            display: none;
        }
        
        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .footer {
            text-align: center;
            color: white;
            margin-top: 2rem;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .card {
                padding: 2rem;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .btn-secondary {
                margin-left: 0;
                margin-top: 1rem;
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h1>ü§ñ AI Visibility Analytics</h1>
            <p class="subtitle">Analyze your brand's visibility in ChatGPT, Claude, and other AI search engines</p>
            
            <div class="feature-grid">
                <div class="feature">
                    <div class="feature-icon">üìä</div>
                    <h3>AIV Score</h3>
                    <p>Get your AI Visibility Score from 0-100 with detailed metrics</p>
                </div>
                <div class="feature">
                    <div class="feature-icon">üåç</div>
                    <h3>Geo-Targeting</h3>
                    <p>Analyze visibility across different countries and languages</p>
                </div>
                <div class="feature">
                    <div class="feature-icon">üèÜ</div>
                    <h3>Competitor Analysis</h3>
                    <p>See how you rank against competitors in AI search results</p>
                </div>
            </div>
            
            <div class="template-section">
                <h3>üìã Start with Our Template</h3>
                <p>Download our CSV template with examples to get started quickly</p>
                <a href="/download-template" class="btn btn-secondary" download>
                    üì• Download Template
                </a>
            </div>
            
            <div class="upload-section">
                <h3>üöÄ Upload Your Analysis File</h3>
                <form id="uploadForm">
                    <div class="form-group">
                        <label for="email">Email Address (for receiving results)</label>
                        <input type="email" id="email" name="email" required placeholder="your.email@company.com">
                    </div>
                    
                    <div class="form-group">
                        <label for="file">Upload CSV/Excel File</label>
                        <input type="file" id="file" name="file" accept=".csv,.xlsx,.tsv" required>
                        <small style="color: #666; margin-top: 0.5rem; display: block;">
                            Supported formats: CSV, XLSX, TSV (Max 10MB)
                        </small>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">
                        üîç Analyze AI Visibility
                    </button>
                </form>
                
                <div id="status" class="status"></div>
            </div>
            
            <div class="format-info">
                <h4>üìã Required File Format</h4>
                <p>Your CSV file must contain exactly these 3 columns:</p>
                <table class="format-table">
                    <thead>
                        <tr>
                            <th>Column</th>
                            <th>Description</th>
                            <th>Example</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><strong>Country</strong></td>
                            <td>Target country for geo-specific analysis</td>
                            <td>USA, UK, Germany</td>
                        </tr>
                        <tr>
                            <td><strong>Prompt</strong></td>
                            <td>Search query to analyze</td>
                            <td>"best vacuum cleaner 2024"</td>
                        </tr>
                        <tr>
                            <td><strong>Website</strong></td>
                            <td>Your domain to track</td>
                            <td>amazon.com</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="footer">
            <p>&copy; 2024 AI Visibility Analytics. Powered by OpenAI & Advanced Analytics.</p>
        </div>
    </div>

    <script>
        document.getElementById('uploadForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const statusDiv = document.getElementById('status');
            const submitBtn = e.target.querySelector('button[type="submit"]');
            
            // Reset status
            statusDiv.style.display = 'none';
            statusDiv.className = 'status';
            
            // Disable submit button
            submitBtn.disabled = true;
            submitBtn.innerHTML = '‚è≥ Processing...';
            
            // Get form data
            const formData = new FormData();
            formData.append('email', document.getElementById('email').value);
            formData.append('file', document.getElementById('file').files[0]);
            
            try {
                const response = await fetch('/submit', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    statusDiv.className = 'status success';
                    statusDiv.innerHTML = `
                        <strong>‚úÖ Success!</strong><br>
                        Your file has been received and is being processed.<br>
                        Results will be sent to <strong>${result.email}</strong> within 5-10 minutes.
                    `;
                    
                    // Reset form
                    document.getElementById('uploadForm').reset();
                } else {
                    throw new Error(result.detail || 'Upload failed');
                }
            } catch (error) {
                statusDiv.className = 'status error';
                statusDiv.innerHTML = `
                    <strong>‚ùå Error:</strong><br>
                    ${error.message}
                `;
            } finally {
                // Re-enable submit button
                submitBtn.disabled = false;
                submitBtn.innerHTML = 'üîç Analyze AI Visibility';
                statusDiv.style.display = 'block';
            }
        });
        
        // File validation
        document.getElementById('file').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const maxSize = 10 * 1024 * 1024; // 10MB
                if (file.size > maxSize) {
                    alert('File too large. Maximum size is 10MB.');
                    e.target.value = '';
                    return;
                }
                
                const validTypes = ['text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
                if (!validTypes.includes(file.type) && !file.name.match(/\\.(csv|xlsx|tsv)$/i)) {
                    alert('Invalid file type. Please upload CSV, XLSX, or TSV files only.');
                    e.target.value = '';
                    return;
                }
            }
        });
    </script>
</body>
</html>"""

def get_client_ip(request: Request) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    forwarded_for = request.headers.get("x-forwarded-for")
    if forwarded_for:
        return forwarded_for.split(",")[0].strip()
    if request.client:
        return request.client.host
    return "0.0.0.0"

def create_geo_targeted_prompt(prompt: str, country: str) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenAI
    
    Args:
        prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        country: –°—Ç—Ä–∞–Ω–∞ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞
        
    Returns:
        –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º
    """
    country_prompts = {
        'USA': 'Answer as if responding to someone in the United States',
        'UK': 'Answer as if responding to someone in the United Kingdom', 
        'Germany': 'Answer as if responding to someone in Germany, auf Deutsch wenn n√∂tig',
        'France': 'Answer as if responding to someone in France, en fran√ßais si n√©cessaire',
        'Canada': 'Answer as if responding to someone in Canada',
        'Australia': 'Answer as if responding to someone in Australia'
    }
    
    geo_context = country_prompts.get(country, f'Answer as if responding to someone in {country}')
    return f"{geo_context}: {prompt}"

def create_template_csv() -> bytes:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ CSV —à–∞–±–ª–æ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏
    
    Returns:
        Bytes —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ CSV —Ñ–∞–π–ª–∞
    """
    template_data = {
        'Country': [
            'UK', 'USA', 'Germany', 'UK', 'USA'
        ],
        'Prompt': [
            'Dyson V15 cordless vacuum cleaner best price',
            'KitchenAid stand mixer reviews USA', 
            'Samsung Waschmaschine 9kg Frontlader',
            'Ninja air fryer large capacity reviews',
            'Bosch dishwasher built-in stainless steel'
        ],
        'Website': [
            'amazon.com', 'amazon.com', 'amazon.com', 'amazon.com', 'amazon.com'
        ]
    }
    
    df = pd.DataFrame(template_data)
    
    # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
    output = BytesIO()
    df.to_csv(output, index=False, encoding='utf-8-sig')
    output.seek(0)
    
    return output.getvalue()

def process_file_worker(file_path: str, email: str, ip: str) -> None:
    """
    Worker —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        ip: IP –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        queries_df, processed_count = FileProcessor.process_file(file_path)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        for _, row in queries_df.iterrows():
            country = row['Country']
            prompt = row['Prompt']
            target_domain = row['target_domain']
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            geo_prompt = create_geo_targeted_prompt(prompt, country)
            
            # –í—ã–∑–æ–≤ OpenAI API
            search_result = openai_client.search_with_web(geo_prompt)
            sources = search_result["sources"]
            usage = search_result["usage"]
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
            metrics = MetricsCalculator.calculate_metrics_for_query(
                sources, target_domain, country
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            result_row = {
                "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç": prompt,
                "–ì–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç": geo_prompt,
                **metrics,
                "Tokens Used": getattr(usage, "total_tokens", None) if usage else None
            }
            
            results.append(result_row)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏ CSV
        results_df = pd.DataFrame(results)
        csv_content = results_df.to_csv(index=False, encoding="utf-8-sig").encode("utf-8-sig")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email –≤ –±–∞–∑—É
        db.save_email(email, ip)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
        email_service.send_report_email(email, csv_content, len(results))
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            os.remove(file_path)
        except:
            pass

# Vercel serverless function initialization
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –í Vercel serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
        # validate_config()  # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –¥–ª—è Vercel
        print("‚úÖ AI Visibility MVP –∑–∞–ø—É—â–µ–Ω –Ω–∞ Vercel")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        # –í serverless —Å—Ä–µ–¥–µ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        pass

@app.get("/")
async def serve_landing():
    """–û—Ç–¥–∞—á–∞ –ª–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    return HTMLResponse(content=LANDING_HTML, status_code=200)

@app.get("/download-template")
async def download_template():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ CSV —Ñ–∞–π–ª–∞
    
    Returns:
        CSV —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    """
    csv_bytes = create_template_csv()
    
    return StreamingResponse(
        BytesIO(csv_bytes),
        media_type="text/csv",
        headers={"Content-Disposition": "attachment; filename=ai_visibility_template.csv"}
    )

@app.post("/submit")
async def submit_file(
    request: Request,
    email: str = Form(..., description="Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"),
    file: UploadFile = File(..., description="–§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ (CSV/TSV/XLSX)")
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file: –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª
        
    Returns:
        JSON –æ—Ç–≤–µ—Ç —Å —Å—Ç–∞—Ç—É—Å–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if not EMAIL_REGEX.match(email):
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
    
    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        content = await file.read()
    except Exception as e:
        raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    try:
        FileProcessor.validate_file_size(content, MAX_UPLOAD_MB)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∏ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
    client_ip = get_client_ip(request)
    file_hash = hashlib.sha256(content).hexdigest()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∏ —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–ª—è Vercel)
    try:
        db.check_ip_file_access(client_ip, file_hash, ALLOW_RETRY_SAME_FILE)
    except PermissionError as e:
        raise HTTPException(status_code=429, detail=str(e))
    except Exception as e:
        # –í serverless —Å—Ä–µ–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        print(f"Database warning: {e}")
        pass
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    file_extension = FileProcessor.get_file_extension(file.filename)
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
            temp_file.write(content)
            temp_file_path = temp_file.name
    except Exception as e:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    worker_thread = threading.Thread(
        target=process_file_worker,
        args=(temp_file_path, email, client_ip),
        daemon=True
    )
    worker_thread.start()
    
    # –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    return JSONResponse({
        "ok": True,
        "email": email,
        "status": "processing",
        "message": "–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç –Ω–∞ email."
    })

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "ok", "service": "AI Visibility MVP", "platform": "Vercel"}

@app.get("/api")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return {
        "message": "AI Visibility MVP API", 
        "version": "1.0.0",
        "platform": "Vercel Serverless",
        "supported_format": "CSV with columns: Country, Prompt, Website",
        "template_download": "/download-template",
        "endpoints": ["/submit", "/download-template", "/health"]
    }

# Vercel serverless handler
def handler(request, response):
    """Vercel serverless handler"""
    return app(request, response)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8080)