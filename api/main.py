"""
–û—Å–Ω–æ–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è AI Visibility MVP
"""

import os
import tempfile
import threading
import hashlib
from typing import Optional
import pandas as pd
from io import BytesIO

from fastapi import FastAPI, Request, UploadFile, File, Form, HTTPException
from fastapi.responses import JSONResponse, StreamingResponse, HTMLResponse
from starlette.middleware.cors import CORSMiddleware

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import EMAIL_REGEX, MAX_UPLOAD_MB, ALLOW_RETRY_SAME_FILE, validate_config
from database import db
from file_processor import FileProcessor
from openai_client import openai_client
from metrics import MetricsCalculator
from email_service import email_service

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="AI Visibility MVP",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ ChatGPT",
    version="1.0.0"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"]
)

# HTML –ª–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ –∫–æ–¥
LANDING_HTML = """<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BoostMyGEO - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –®–Ü –≤–∞—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .gradient-text {
            background: linear-gradient(45deg, #2563eb, #3b82f6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        .gradient-button {
            background: linear-gradient(45deg, #059669, #10b981);
        }
        .gradient-button-blue {
            background: linear-gradient(45deg, #2563eb, #3b82f6);
        }
        .fade-in {
            animation: fadeIn 0.8s ease-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .hover-lift {
            transition: all 0.3s ease;
        }
        .hover-lift:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        .footer {
            margin-top: 1rem;
            padding-top: 2rem;
            padding-bottom: 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200 font-sans leading-relaxed">

    <!-- Header Section -->
    <header class="py-6 px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center max-w-7xl mx-auto">
            <div class="text-2xl font-bold gradient-text">BoostMyGEO</div>
            <nav class="hidden md:flex space-x-6">
                <a href="#" class="hover:text-white transition-colors duration-200">–ü–µ—Ä–µ–≤–∞–≥–∏</a>
                <a href="#" class="hover:text-white transition-colors duration-200">–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î</a>
                <a href="#" class="hover:text-white transition-colors duration-200">–ö–µ–π—Å–∏</a>
                <a href="#" class="hover:text-white transition-colors duration-200">–¶—ñ–Ω–∏</a>
            </nav>
            <a href="#cta" class="py-2 px-6 rounded-full text-white font-semibold shadow-lg gradient-button-blue hover-lift">
                –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ
            </a>
            <button class="md:hidden text-2xl">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-8 h-8">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                </svg>
            </button>
        </div>
    </header>

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Hero Section -->
        <section class="text-center py-20 md:py-32">
            <h1 class="text-4xl md:text-6xl font-extrabold mb-4 leading-tight">
                –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î <span class="gradient-text">–®–Ü</span> –≤–∞—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
            </h1>
            <p class="text-lg md:text-xl text-gray-400 mb-8 max-w-3xl mx-auto">
                –û—Ç—Ä–∏–º–∞–π—Ç–µ –æ—Ü—ñ–Ω–∫—É –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Ç–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ, —è–∫ –≤–∞—à –±—Ä–µ–Ω–¥, —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ—à—É–∫—É ChatGPT, Gemini, Copilot —Ç–∞ —ñ–Ω—à–∏—Ö.
            </p>
            <div class="space-x-4">
                <a href="#cta" class="py-3 px-8 rounded-full text-white font-bold shadow-xl hover-lift inline-block gradient-button">
                    –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑
                </a>
            </div>
        </section>

        <!-- Features Section -->
        <section id="features" class="py-16">
            <div class="grid md:grid-cols-3 gap-8">
                <div class="bg-gray-800 p-8 rounded-2xl text-center hover-lift fade-in feature-card">
                    <div class="text-4xl mb-4">üèÜ</div>
                    <h3 class="text-2xl font-bold text-white mb-2">–û—Ü—ñ–Ω–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –®–Ü</h3>
                    <p class="text-gray-400">
                        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞—à AIV-Score –≤—ñ–¥ 0 –¥–æ 100, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –ø–æ–∑–∏—Ü—ñ—é, –∑–≥–∞–¥–∫–∏, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ —Ç–∞ —ñ–Ω—à—ñ —Ñ–∞–∫—Ç–æ—Ä–∏.
                    </p>
                </div>
                <div class="bg-gray-800 p-8 rounded-2xl text-center hover-lift fade-in feature-card" style="animation-delay: 0.1s;">
                    <div class="text-4xl mb-4">üåç</div>
                    <h3 class="text-2xl font-bold text-white mb-2">–ì–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥</h3>
                    <p class="text-gray-400">
                        –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö –∫—Ä–∞—ó–Ω–∞—Ö —Ç–∞ –º–æ–≤–∞—Ö, —â–æ–± –æ—Ü—ñ–Ω–∏—Ç–∏ –≤–∞—à—É –ª–æ–∫–∞–ª—å–Ω—É –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å.
                    </p>
                </div>
                <div class="bg-gray-800 p-8 rounded-2xl text-center hover-lift fade-in feature-card" style="animation-delay: 0.2s;">
                    <div class="text-4xl mb-4">üìà</div>
                    <h3 class="text-2xl font-bold text-white mb-2">–ó–≤—ñ—Ç –∑ –¥–µ—Ç–∞–ª—è–º–∏</h3>
                    <p class="text-gray-400">
                        –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ –±—Ä–µ–Ω–¥—É –≤ –®–Ü-–ø–æ—à—É–∫—É –∑ –∫–ª—é—á–æ–≤–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏.
                    </p>
                </div>
            </div>
        </section>
        
        <!-- How It Works Section -->
        <section id="how-it-works" class="py-16">
            <h2 class="text-3xl md:text-4xl font-bold text-center mb-12">
                –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î
            </h2>
            <div class="grid md:grid-cols-2 gap-12 items-center">
                <div class="space-y-6">
                    <div class="p-6 bg-gray-800 rounded-xl hover-lift">
                        <h4 class="text-xl font-semibold mb-2 text-white">1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª</h4>
                        <p class="text-gray-400">
                            –ü—Ä–æ—Å—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª CSV –∞–±–æ XLSX —ñ–∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, –∫–ª—é—á–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —ñ –¥–æ–º–µ–Ω—ñ–≤.
                        </p>
                        <a href="/api/download-template" class="text-blue-400 hover:text-blue-300 transition-colors duration-200 mt-2 block font-medium" download>
                            –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω ‚Üí
                        </a>
                    </div>
                    <div class="p-6 bg-gray-800 rounded-xl hover-lift">
                        <h4 class="text-xl font-semibold mb-2 text-white">2. –®–Ü –∞–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ</h4>
                        <p class="text-gray-400">
                            –ù–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–µ—Ä–µ–¥–æ–≤–∏—Ö –®–Ü-–º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª—ñ–∑—É—î, —è–∫ –≤–∞—à –±—Ä–µ–Ω–¥, –ø—Ä–æ–¥—É–∫—Ç–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ –≤ –®–Ü-–ø–æ—à—É–∫—É.
                        </p>
                    </div>
                    <div class="p-6 bg-gray-800 rounded-xl hover-lift">
                        <h4 class="text-xl font-semibold mb-2 text-white">3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –∑–≤—ñ—Ç</h4>
                        <p class="text-gray-400">
                            –ú–∏ –Ω–∞–¥—ñ—à–ª–µ–º–æ –≤–∞–º –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –∑ –≤–∞—à–∏–º AIV-Score —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏.
                        </p>
                    </div>
                </div>
                <div>
                    <img src="https://placehold.co/400x300/1e293b/d1d5db?text=AI+Analysis" alt="AI analysis process illustration" class="w-full h-auto rounded-xl shadow-lg">
                </div>
            </div>
        </section>

        <!-- CTA Section -->
        <section id="cta" class="py-16 text-center">
            <h2 class="text-3xl md:text-4xl font-bold mb-4">–ì–æ—Ç–æ–≤—ñ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ –≤–∏–¥–∏–º—ñ—Å—Ç—å?</h2>
            <p class="text-lg text-gray-400 mb-8">
                –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —á–∏ –≤–∞—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –µ—Ä–∏ –®–Ü-–ø–æ—à—É–∫—É.
            </p>
            <div class="bg-gray-800 p-8 rounded-2xl max-w-2xl mx-auto shadow-lg">
                <form id="uploadForm" class="space-y-6">
                    <div>
                        <label for="email" class="block text-gray-400 mb-2 text-left">–í–∞—à Email</label>
                        <input type="email" id="email" name="email" required placeholder="your.email@company.com" class="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="file" class="block text-gray-400 mb-2 text-left">–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª (CSV/XLSX)</label>
                        <input type="file" id="file" name="file" accept=".csv,.xlsx,.tsv" required class="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-gray-300">
                        <small class="text-gray-500 mt-2 block text-left">
                            –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: CSV, XLSX, TSV (–ú–∞–∫—Å. 10–ú–ë)
                        </small>
                    </div>
                    <button type="submit" class="w-full py-3 rounded-full text-white font-bold shadow-lg hover-lift gradient-button-blue">
                        –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–∏–¥–∏–º—ñ—Å—Ç—å
                    </button>
                </form>
                <div id="status" class="status mt-4 text-left"></div>
            </div>
        </section>

        <!-- Final CTA section -->
        <section id="final-cta" class="py-16 text-center">
            <a href="#cta" class="py-3 px-8 rounded-full text-white font-bold shadow-xl hover-lift inline-block gradient-button">
                –ü–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑
            </a>
        </section>
    </main>

    <!-- Footer -->
    <footer class="footer text-center text-gray-500">
        <p>&copy; 2024 BoostMyGEO. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.</p>
    </footer>

    <script>
        document.getElementById('uploadForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const statusDiv = document.getElementById('status');
            const submitBtn = e.target.querySelector('button[type="submit"]');
            
            // Reset status
            statusDiv.style.display = 'none';
            statusDiv.className = '';
            
            // Disable submit button
            submitBtn.disabled = true;
            submitBtn.innerHTML = '‚è≥ –û–±—Ä–æ–±–∫–∞...';
            
            // Get form data
            const formData = new FormData();
            formData.append('email', document.getElementById('email').value);
            formData.append('file', document.getElementById('file').files[0]);
            
            try {
                const response = await fetch('/api/submit', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    statusDiv.className = 'status success bg-green-900 text-green-300 p-4 rounded-xl';
                    statusDiv.innerHTML = `
                        <strong>‚úÖ –£—Å–ø—ñ—Ö!</strong><br>
                        –§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.<br>
                        –ó–≤—ñ—Ç –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ <strong>${result.email}</strong> –ø—Ä–æ—Ç—è–≥–æ–º 5-10 —Ö–≤–∏–ª–∏–Ω.
                    `;
                    
                    document.getElementById('uploadForm').reset();
                } else {
                    statusDiv.className = 'status error bg-red-900 text-red-300 p-4 rounded-xl';
                    statusDiv.innerHTML = `
                        <strong>‚ùå –ü–æ–º–∏–ª–∫–∞:</strong><br>
                        ${result.detail || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è'}
                    `;
                    throw new Error(result.detail || 'Upload failed');
                }
            } catch (error) {
                statusDiv.className = 'status error bg-red-900 text-red-300 p-4 rounded-xl';
                statusDiv.innerHTML = `
                    <strong>‚ùå –ü–æ–º–∏–ª–∫–∞:</strong><br>
                    ${error.message}
                `;
            } finally {
                // Re-enable submit button
                submitBtn.disabled = false;
                submitBtn.innerHTML = '–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–∏–¥–∏–º—ñ—Å—Ç—å';
                statusDiv.style.display = 'block';
            }
        });
        
        // File validation - Updated to use custom modal
        document.getElementById('file').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const maxSize = 10 * 1024 * 1024; // 10MB
                if (file.size > maxSize) {
                    showCustomModal('–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä 10–ú–ë.');
                    e.target.value = '';
                    return;
                }
                
                const validTypes = ['text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/tsv'];
                if (!validTypes.includes(file.type) && !file.name.match(/\\.(csv|xlsx|tsv)$/i)) {
                    showCustomModal('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π—Ç–µ –ª–∏—à–µ —Ñ–∞–π–ª–∏ CSV, XLSX –∞–±–æ TSV.');
                    e.target.value = '';
                    return;
                }
            }
        });

        function showCustomModal(message) {
            const modal = document.createElement('div');
            modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center; z-index: 1000;';
            modal.innerHTML = `
                <div style="background: #1f2937; padding: 2rem; border-radius: 1rem; text-align: center; max-width: 400px; box-shadow: 0 10px 20px rgba(0,0,0,0.2);">
                    <p style="color: #f3f4f6; font-size: 1.125rem; margin-bottom: 1.5rem;">${message}</p>
                    <button onclick="this.parentElement.parentElement.remove()" style="background: #3b82f6; color: white; padding: 0.75rem 1.5rem; border-radius: 9999px; font-weight: bold;">–ó–∞–∫—Ä–∏—Ç–∏</button>
                </div>
            `;
            document.body.appendChild(modal);
        }

        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('fade-in');
                }
            });
        }, observerOptions);

        document.querySelectorAll('.feature-card').forEach(el => {
            observer.observe(el);
        });

    </script>
</body>
</html>"""

def get_client_ip(request: Request) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    forwarded_for = request.headers.get("x-forwarded-for")
    if forwarded_for:
        return forwarded_for.split(",")[0].strip()
    if request.client:
        return request.client.host
    return "0.0.0.0"

def create_geo_targeted_prompt(prompt: str, country: str) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenAI
    
    Args:
        prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        country: –°—Ç—Ä–∞–Ω–∞ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞
        
    Returns:
        –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º
    """
    country_prompts = {
        'USA': 'Answer as if responding to someone in the United States',
        'UK': 'Answer as if responding to someone in the United Kingdom', 
        'Germany': 'Answer as if responding to someone in Germany, auf Deutsch wenn n√∂tig',
        'France': 'Answer as if responding to someone in France, en fran√ßais si n√©cessaire',
        'Canada': 'Answer as if responding to someone in Canada',
        'Australia': 'Answer as if responding to someone in Australia'
    }
    
    geo_context = country_prompts.get(country, f'Answer as if responding to someone in {country}')
    return f"{geo_context}: {prompt}"

def create_template_csv() -> bytes:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ CSV —à–∞–±–ª–æ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    
    Returns:
        Bytes —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ CSV —Ñ–∞–π–ª–∞
    """
    template_data = {
        'Country': [
            'UK', 'USA', 'Germany', 'UK', 'USA',
            'Germany', 'UK', 'USA', 'Germany', 'UK'
        ],
        'Prompt': [
            'Dyson V15 cordless vacuum cleaner best price UK',
            'KitchenAid stand mixer reviews USA', 
            'Samsung Waschmaschine 9kg Frontlader Deutschland',
            'Ninja air fryer large capacity reviews UK',
            'Bosch dishwasher built-in stainless steel USA',
            'Miele Waschmaschine Test Deutschland',
            'Shark vacuum cleaner cordless UK best',
            'Instant Pot pressure cooker reviews USA',
            'AEG Geschirrsp√ºler Einbau Deutschland',
            'Russell Hobbs kettle best price UK'
        ],
        'Website': [
            'amazon.com', 'amazon.com', 'amazon.de', 'amazon.co.uk', 'amazon.com',
            'amazon.de', 'amazon.co.uk', 'amazon.com', 'amazon.de', 'amazon.co.uk'
        ]
    }
    
    df = pd.DataFrame(template_data)
    
    output = BytesIO()
    df.to_csv(output, index=False, encoding='utf-8-sig')
    output.seek(0)
    
    return output.getvalue()

def process_file_worker(file_path: str, email: str, ip: str) -> None:
    """
    Worker —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        ip: IP –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        queries_df, processed_count = FileProcessor.process_file(file_path)
        
        results = []
        
        for _, row in queries_df.iterrows():
            country = row['Country']
            prompt = row['Prompt']
            target_domain = row['target_domain']
            
            geo_prompt = create_geo_targeted_prompt(prompt, country)
            
            search_result = openai_client.search_with_web(geo_prompt)
            sources = search_result["sources"]
            usage = search_result["usage"]
            
            metrics = MetricsCalculator.calculate_metrics_for_query(
                sources, target_domain, country
            )
            
            result_row = {
                "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç": prompt,
                "–ì–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç": geo_prompt,
                **metrics,
                "Tokens Used": getattr(usage, "total_tokens", None) if usage else None
            }
            
            results.append(result_row)
        
        results_df = pd.DataFrame(results)
        csv_content = results_df.to_csv(index=False, encoding="utf-8-sig").encode("utf-8-sig")
        
        db.save_email(email, ip)
        
        email_service.send_report_email(email, csv_content, len(results))
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    finally:
        try:
            os.remove(file_path)
        except:
            pass

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        validate_config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("‚úÖ AI Visibility MVP –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        pass

@app.get("/")
async def serve_landing():
    """–û—Ç–¥–∞—á–∞ –ª–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    return HTMLResponse(content=LANDING_HTML, status_code=200)

@app.get("/api/download-template")
async def download_template():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ CSV —Ñ–∞–π–ª–∞
    
    Returns:
        CSV —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    """
    csv_bytes = create_template_csv()
    
    headers = {
        "Content-Disposition": "attachment; filename=ai_visibility_template.csv",
        "Content-Type": "text/csv; charset=utf-8",
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "Pragma": "no-cache",
        "Expires": "0"
    }
    
    return StreamingResponse(
        BytesIO(csv_bytes),
        media_type="text/csv",
        headers=headers
    )

@app.post("/api/submit")
async def submit_file(
    request: Request,
    email: str = Form(..., description="Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"),
    file: UploadFile = File(..., description="–§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ (CSV/TSV/XLSX)")
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file: –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª
        
    Returns:
        JSON –æ—Ç–≤–µ—Ç —Å —Å—Ç–∞—Ç—É—Å–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    if not EMAIL_REGEX.match(email):
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
    
    try:
        content = await file.read()
    except Exception as e:
        raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    try:
        FileProcessor.validate_file_size(content, MAX_UPLOAD_MB)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    
    client_ip = get_client_ip(request)
    file_hash = hashlib.sha256(content).hexdigest()
    
    try:
        db.check_ip_file_access(client_ip, file_hash, ALLOW_RETRY_SAME_FILE)
    except PermissionError as e:
        raise HTTPException(status_code=429, detail=str(e))
    except Exception as e:
        print(f"Database warning: {e}")
        pass
    
    file_extension = FileProcessor.get_file_extension(file.filename)
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
            temp_file.write(content)
            temp_file_path = temp_file.name
    except Exception as e:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    worker_thread = threading.Thread(
        target=process_file_worker,
        args=(temp_file_path, email, client_ip),
        daemon=True
    )
    worker_thread.start()
    
    return JSONResponse({
        "ok": True,
        "email": email,
        "status": "processing",
        "message": "–§–∞–π–ª –ø—Ä–∏–π–Ω—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É. –û—á—ñ–∫—É–π—Ç–µ –∑–≤—ñ—Ç –Ω–∞ email."
    })

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "ok", "service": "AI Visibility MVP"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8080)
